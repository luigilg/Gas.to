function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import { useLinkProps, useTheme } from '@react-navigation/native';
import Color from 'color';
import * as React from 'react';
import { StyleSheet } from 'react-native';
import { PlatformPressable } from './PlatformPressable';
import { Text } from './Text';
const BUTTON_RADIUS = 40;
export function Button(props) {
  if ('screen' in props || 'action' in props) {
    return /*#__PURE__*/React.createElement(ButtonLink, props);
  } else {
    return /*#__PURE__*/React.createElement(ButtonBase, props);
  }
}
function ButtonLink(_ref) {
  let {
    screen,
    params,
    action,
    href,
    ...rest
  } = _ref;
  // @ts-expect-error: This is already type-checked by the prop types
  const props = useLinkProps({
    screen,
    params,
    action,
    href
  });
  return /*#__PURE__*/React.createElement(ButtonBase, _extends({}, rest, props));
}
function ButtonBase(_ref2) {
  let {
    variant = 'tinted',
    color: customColor,
    android_ripple,
    style,
    children,
    ...rest
  } = _ref2;
  const {
    colors,
    fonts
  } = useTheme();
  const color = customColor ?? colors.primary;
  let backgroundColor;
  let textColor;
  switch (variant) {
    case 'plain':
      backgroundColor = 'transparent';
      textColor = color;
      break;
    case 'tinted':
      backgroundColor = Color(color).fade(0.85).string();
      textColor = color;
      break;
    case 'filled':
      backgroundColor = color;
      textColor = Color(color).isDark() ? 'white' : Color(color).darken(0.71).string();
      break;
  }
  return /*#__PURE__*/React.createElement(PlatformPressable, _extends({}, rest, {
    style: [{
      backgroundColor
    }, styles.button, style],
    android_ripple: {
      radius: BUTTON_RADIUS,
      color: Color(textColor).fade(0.85).string(),
      ...android_ripple
    }
  }), /*#__PURE__*/React.createElement(Text, {
    style: [{
      color: textColor
    }, fonts.regular, styles.text]
  }, children));
}
const styles = StyleSheet.create({
  button: {
    paddingHorizontal: 24,
    paddingVertical: 10,
    borderRadius: BUTTON_RADIUS
  },
  text: {
    fontSize: 14,
    lineHeight: 20,
    letterSpacing: 0.1,
    textAlign: 'center'
  }
});
//# sourceMappingURL=Button.js.map